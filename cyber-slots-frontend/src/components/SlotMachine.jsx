import React, { useState, useEffect } from 'react';
import styled from '@emotion/styled';
import { motion } from 'framer-motion';
import Symbol from './Symbol.jsx';

// –ó–±—ñ–ª—å—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è ¬´—Ñ–µ–π–∫–æ–≤–∏—Ö¬ª —Å–∏–º–≤–æ–ª—ñ–≤ + –æ—Å–Ω–æ–≤–Ω—ñ —Å–∏–º–≤–æ–ª–∏
const REEL_HEIGHT = 480; // 6 —Ä—è–¥—ñ–≤ –ø–æ ~80px, –º–æ–∂–Ω–∞ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –ø—ñ–¥ –≤–∞—à—ñ —Ä–æ–∑–º—ñ—Ä–∏

const Grid = styled.div`
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
    padding: 20px;
    background: rgba(26, 26, 36, 0.9);
    border-radius: 20px;
    border: 3px solid ${props => props.theme.colors.primary};
    box-shadow: 0 0 20px rgba(0, 255, 159, 0.3);
    width: 120vw;
    max-width: 1200px;
    margin: 0 auto;
`;

/**
 * ReelColumn ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è.
 * –ó—Ä–æ–±–∏–ª–∏ –≤–∏—â–∏–º, —â–æ–± –≤–º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ —Å–∏–º–≤–æ–ª—ñ–≤ (—Ñ–µ–π–∫–æ–≤—ñ + —Å–ø—Ä–∞–≤–∂–Ω—ñ).
 */
const ReelColumn = styled(motion.div)`
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: center;
  overflow: hidden;
  height: ${REEL_HEIGHT}px; 
`;

/**
 * reelVariants ‚Äî –∞–Ω—ñ–º–∞—Ü—ñ—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–µ—Ä—Ç—É:
 *  1. "spin": –¥–æ–≤—à–∏–π –ø—Ä–æ—Ö—ñ–¥ –∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è–º (—â–æ–± ¬´–∫—Ä—É—Ç–∏–ª–æ—Å—å¬ª –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤),
 *  2. "final": –ø–ª–∞–≤–Ω–µ ¬´–ø—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—è¬ª –Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏.
 */
const reelVariants = {
    initial: { y: 0 },
    spin: {
        y: -REEL_HEIGHT,
        transition: {
            duration: 1.5,
            ease: 'easeInOut',
            repeat: 1,           // —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ —Å–∫—Ä–æ–ª–∏—Ç–∏ ¬´—Ç—É–¥–∏-—Å—é–¥–∏¬ª
            repeatType: 'loop',  // —Ü–∏–∫–ª (loop)
        },
    },
    final: {
        y: 0,
        transition: {
            duration: 0.6,
            ease: 'easeOut',
        },
    },
};

const SlotMachine = ({ grid, winningLine, isSpinning }) => {
    // columns –º—ñ—Å—Ç–∏—Ç—å —Ñ–µ–π–∫–æ–≤—ñ + —Ä–µ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏.
    // –ö–æ–ª–∏ spin –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è, –ø—ñ–¥–º—ñ–Ω—é—î–º–æ –Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π grid.
    const [columns, setColumns] = useState([]);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç—Ä–æ—Ö–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –µ–º–æ–¥–∑—ñ –¥–ª—è —Ñ–µ–π–∫—É (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏).
    // –¢—É—Ç –º–æ–∂–Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ –±—É–¥—å-—â–æ, –∞–±–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ—Ñ–µ–∫—Ç ¬´–∑–∞–π–≤–∏—Ö¬ª —Ä—è–¥–∫—ñ–≤.
    const getFakeSymbols = () => {
        // –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, 2 —Ñ–µ–π–∫–æ–≤—ñ —Ä—è–¥–∫–∏ –∑–≤–µ—Ä—Ö—É —ñ 1 –∑–Ω–∏–∑—É.
        // –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥ –≤–∞—à –¥–∏–∑–∞–π–Ω.
        const fakeTop = [
            ['üëΩ', 'üí≤', 'üí£'],
            ['üöÄ', 'üçÄ', 'ü™ê'],
        ];
        const fakeBottom = [
            ['üíµ', 'üåü', 'üî•'],
        ];
        // –í–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π grid —Å—Ç–∞–≤–∏–º–æ –º—ñ–∂ –Ω–∏–º–∏.
        return [...fakeTop, ...grid, ...fakeBottom];
    };

    useEffect(() => {
        if (isSpinning) {
            // –ù–∞ –ø–æ—á–∞—Ç–∫—É —Å–ø—ñ–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–µ–π–∫–æ–≤—ñ + —Ä–µ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            setColumns(getFakeSymbols());
        } else {
            // –ö–æ–ª–∏ —Å–ø—ñ–Ω –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è - –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º grid
            setColumns(grid);
        }
    }, [isSpinning, grid]);

    return (
        <Grid>
            {[0, 1, 2].map((colIndex) => {
                // –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–∫–æ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ñ–µ–π–∫–æ–≤—ñ —Ä—è–¥–∫–∏
                const colItems = columns.map((row) => row[colIndex]);
                return (
                    <ReelColumn
                        key={`col-${colIndex}`}
                        initial="initial"
                        animate={isSpinning ? 'spin' : 'final'}
                        variants={reelVariants}
                        onAnimationComplete={(def) => {
                            // –ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –∞–Ω—ñ–º–∞—Ü—ñ—è ¬´spin¬ª ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ ¬´final¬ª
                            // –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø—Ä–∞–≤–∂–Ω–∏–π grid, —è–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Ñ–∞–∑–∞.
                            if (def === 'spin') {
                                // –ü—ñ–¥–º—ñ–Ω—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –π ¬´–ø—Ä–∏–∑–µ–º–ª—è—î–º–æ—Å—å¬ª
                                setColumns(grid);
                            }
                        }}
                    >
                        {colItems.map((icon, rowIndex) => (
                            <Symbol
                                key={`${rowIndex}-${colIndex}`}
                                icon={icon}
                                // ¬´isWinning¬ª –ø–æ–∑–Ω–∞—á–∞—î–º–æ, —è–∫—â–æ –¥–æ—Ä—ñ–≤–Ω—é—î –≤–∏–≥—Ä–∞—à–Ω–æ–º—É —Ä—è–¥—É –≤ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ
                                isWinning={!isSpinning && winningLine === rowIndex}
                            />
                        ))}
                    </ReelColumn>
                );
            })}
        </Grid>
    );
};

export default SlotMachine;
