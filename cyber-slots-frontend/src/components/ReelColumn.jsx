// ReelColumn.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { motion } from 'framer-motion';
import styled from '@emotion/styled';
import Symbol from './Symbol.jsx';

// –í–∏–ø–∞–¥–∫–æ–≤–µ –≤–∏–±—ñ—Ä –µ–º–æ–¥–∑—ñ –∑ –≤–∞—à–æ–≥–æ –Ω–∞–±–æ—Ä—É (–∞–±–æ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—î)
const ALL_EMOJIS = [
    'ü§ñ', 'üí°', 'üíæ', 'üåê', '‚ö°', 'üëæ', 'üé∞', 'üîÆ', 'ü¶æ', 'üöÄ', 'üõ∏', 'üîå',
    'üö®', 'ü§ò', 'üíª', 'üïπÔ∏è', 'üß¨', 'ü§Ø', 'üëÅÔ∏è', 'ü™ê'
];

const ColumnWrapper = styled.div`
  overflow: hidden;
  height: 320px; /* –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤ */
  width: 100%;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  position: relative;
`;

const Reel = styled(motion.div)`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
`;

const ReelColumn = ({ finalSymbols, isSpinning, winningLine, colIndex }) => {
    // –ö—ñ–ª—å–∫—ñ—Å—Ç—å ¬´—Ñ–µ–π–∫–æ–≤–∏—Ö¬ª —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä–µ–¥ —Ç–∏–º,
    // —è–∫ ¬´–¥–æ—ó–¥–µ¬ª –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö 4-—Ö
    const randomSymbolsCount = 8;

    // –í–∏—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–∑–∞–ø–∞—Å + –≤—ñ–¥—Å—Ç—É–ø)
    const symbolHeight = 78;

    // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É –ø–æ–∫–∞–∂–µ Reel (8 —Ñ–µ–π–∫–æ–≤–∏—Ö + 4 —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö)
    const totalSymbols = randomSymbolsCount + finalSymbols.length;

    // –ü–æ—á–∞—Ç–∫–æ–≤–æ –∑–≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –µ–º–æ–¥–∑—ñ
    const [randomSymbols, setRandomSymbols] = useState([]);
    useEffect(() => {
        createRandomSymbols();
    }, []);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –µ–º–æ–¥–∑—ñ
    const createRandomSymbols = () => {
        const arr = [];
        for (let i = 0; i < randomSymbolsCount; i++) {
            const rnd = Math.floor(Math.random() * ALL_EMOJIS.length);
            arr.push(ALL_EMOJIS[rnd]);
        }
        setRandomSymbols(arr);
    };

    // –ú–∞—Å–∏–≤ "–ø–æ–∫–∞–∑—É–≤–∞–Ω–∏—Ö" —Å–∏–º–≤–æ–ª—ñ–≤: —Å–ø–æ—á–∞—Ç–∫—É —Ä–∞–Ω–¥–æ–º–Ω—ñ, –ø–æ—Ç—ñ–º ‚Äî —Ñ—ñ–Ω–∞–ª—å–Ω—ñ
    const displayedSymbols = useMemo(() => {
        return [...randomSymbols, ...finalSymbols.map(s => s)];
    }, [randomSymbols, finalSymbols]);

    /**
     * –ù–∞ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç—É —Å–ø—ñ–Ω—É –º–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏,
     * —â–æ–± –∫–æ–∂–µ–Ω —Ä–∞–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–ª–∞ ¬´—É–Ω—ñ–∫–∞–ª—å–Ω–∞¬ª.
     */
    useEffect(() => {
        if (isSpinning) {
            createRandomSymbols();
        }
    }, [isSpinning]);

    /**
     * –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é.
     * - "rest": –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω (y: 0)
     * - "spin": –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≥–æ—Ä—É (–º—ñ–Ω—É—Å –ø–æ–≤–Ω–∞ –≤–∏—Å–æ—Ç–∞ –Ω–∞ totalSymbols),
     *   —ñ –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —É "rest",
     *   –∞–ª–µ —Ç–æ–¥—ñ –º–∏ —Ñ–∞–∫—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–∏–º–æ state (finalSymbols), —Ç–æ–∂ –≤—ñ–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     */
    const reelVariants = {
        rest: {
            y: 0
        },
        spin: {
            y: -(symbolHeight * randomSymbolsCount), // ¬´–ø—Ä–æ–∫—Ä—É—á—É—î–º–æ¬ª —Ç—ñ–ª—å–∫–∏ –¥–æ –º–æ–º–µ–Ω—Ç—É –ø–æ—è–≤–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö 4 —Å–∏–º–≤–æ–ª—ñ–≤
            transition: {
                duration: 1.5, // —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                ease: 'easeInOut'
            }
        }
    };

    return (
        <ColumnWrapper>
            <Reel
                initial="rest"
                animate={isSpinning ? 'spin' : 'rest'}
                variants={reelVariants}
            >
                {displayedSymbols.map((icon, index) => {
                    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ, —á–∏ —Ü–µ–π —Å–∏–º–≤–æ–ª —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ winningLine (—Ç—Ä–µ–±–∞ –∑–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å)
                    // –ê–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∞–º‚Äô—è—Ç–∞—Ç–∏, —â–æ –ø–µ—Ä—à—ñ randomSymbolsCount ‚Äî —Ñ–µ–π–∫–æ–≤—ñ,
                    // –∞ —Ä–µ–∞–ª—å–Ω—ñ 4 –π–¥—É—Ç—å –≤ –∫—ñ–Ω—Ü—ñ. –¢–æ–π, —Ö—Ç–æ –≤–∏–≥—Ä–∞–≤, –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 4,
                    // —Ç–æ–∂ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ = index - randomSymbolsCount.
                    const realSymbolIndex = index - randomSymbolsCount;
                    const isWinning =
                        realSymbolIndex >= 0 &&
                        realSymbolIndex === winningLine;

                    // –Ø–∫—â–æ icon ‚Äì —Ü–µ ¬´—Å–∏–º–≤–æ–ª Java¬ª (object), –¥—ñ—Å—Ç–∞–Ω–µ–º–æ .icon,
                    // —ñ–Ω–∞–∫—à–µ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–∫
                    const displayedIcon = typeof icon === 'object' ? icon.icon : icon;

                    return (
                        <Symbol
                            key={`symbol-${colIndex}-${index}`}
                            icon={displayedIcon}
                            isWinning={isWinning}
                        />
                    );
                })}
            </Reel>
        </ColumnWrapper>
    );
};

export default ReelColumn;